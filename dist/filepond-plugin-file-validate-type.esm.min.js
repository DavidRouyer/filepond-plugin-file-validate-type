/*
 * FilePondPluginFileValidateType 1.0.3
 * Licensed under MIT, https://opensource.org/licenses/MIT
 * Please visit https://pqina.nl/filepond for details.
 */
var plugin$1=({addFilter:e,utils:t})=>{const{Type:i,isString:E,guesstimateMimeType:n,getExtensionFromFilename:T,getFilenameFromURL:l}=t,_=(e,t)=>{if(0===t.length)return!0;let i="";if(E(e)){const t=l(e),E=T(t);if(!E)return!0;i=n(E)}else i=e.type;return((e,t)=>e.some(e=>/\*$/.test(e)?((e,i)=>(/^[^/]+/.exec(t)||[]).pop()===i.slice(0,-2))(0,e):e===t))(t,i)};return e("SET_ATTRIBUTE_TO_OPTION_MAP",e=>Object.assign(e,{accept:"acceptedFileTypes"})),e("ALLOW_HOPPER_ITEM",(e,{query:t})=>!t("GET_ALLOW_FILE_TYPE_VALIDATION")||_(e,t("GET_ACCEPTED_FILE_TYPES"))),e("LOAD_FILE",(e,{query:t})=>new Promise((i,E)=>{if(!t("GET_ALLOW_FILE_TYPE_VALIDATION"))return void i(e);const n=t("GET_ACCEPTED_FILE_TYPES");_(e,n)?i(e):E({status:{main:t("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:t("GET_ACCEPTED_FILE_TYPES").join(", ")}})})),{options:{allowFileTypeValidation:[!0,i.BOOLEAN],acceptedFileTypes:[[],i.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",i.STRING]}}};"undefined"!=typeof navigator&&document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:plugin$1}));export default plugin$1;